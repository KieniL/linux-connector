// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Connection Store Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://api/connectionstore".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ConnectionStore
 */
export interface ConnectionStore {
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    hostname: string;
    /**
     * 
     * @type {number}
     * @memberof ConnectionStore
     */
    port: number;
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    sshkey: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionStore
     */
    password: string;
}

/**
 * 
 * @export
 * @interface ConnectionStoreStatus
 */
export interface ConnectionStoreStatus {
    /**
     * 
     * @type {number}
     * @memberof ConnectionStoreStatus
     */
    status: number;
}

/**
 * 
 * @export
 * @interface DeleteConnectionStoreRequest
 */
export interface DeleteConnectionStoreRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteConnectionStoreRequest
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteConnectionStoreRequest
     */
    storeId: string;
}


/**
 * ConnstoreApi - axios parameter creator
 * @export
 */
export const ConnstoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary AddConnectionStore
         * @param {ConnectionStore} [connectionStore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConnectionStore(connectionStore?: ConnectionStore, options: any = {}): RequestArgs {
            const localVarPath = `/connstore`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectionStore" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(connectionStore || {}) : (connectionStore || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteConnectionStore
         * @param {DeleteConnectionStoreRequest} deleteConnectionStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectionStore(deleteConnectionStoreRequest: DeleteConnectionStoreRequest, options: any = {}): RequestArgs {
            // verify required parameter 'deleteConnectionStoreRequest' is not null or undefined
            if (deleteConnectionStoreRequest === null || deleteConnectionStoreRequest === undefined) {
                throw new RequiredError('deleteConnectionStoreRequest','Required parameter deleteConnectionStoreRequest was null or undefined when calling deleteConnectionStore.');
            }
            const localVarPath = `/connstore`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DeleteConnectionStoreRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteConnectionStoreRequest || {}) : (deleteConnectionStoreRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetConnectionStores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionStores(options: any = {}): RequestArgs {
            const localVarPath = `/connstore`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateConnectionStore
         * @param {string} storeId the id of the stored Connection
         * @param {ConnectionStore} connectionStore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectionStore(storeId: string, connectionStore: ConnectionStore, options: any = {}): RequestArgs {
            // verify required parameter 'storeId' is not null or undefined
            if (storeId === null || storeId === undefined) {
                throw new RequiredError('storeId','Required parameter storeId was null or undefined when calling updateConnectionStore.');
            }
            // verify required parameter 'connectionStore' is not null or undefined
            if (connectionStore === null || connectionStore === undefined) {
                throw new RequiredError('connectionStore','Required parameter connectionStore was null or undefined when calling updateConnectionStore.');
            }
            const localVarPath = `/connstore/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectionStore" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(connectionStore || {}) : (connectionStore || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnstoreApi - functional programming interface
 * @export
 */
export const ConnstoreApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary AddConnectionStore
         * @param {ConnectionStore} [connectionStore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConnectionStore(connectionStore?: ConnectionStore, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionStoreStatus> {
            const localVarAxiosArgs = ConnstoreApiAxiosParamCreator(configuration).addConnectionStore(connectionStore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary DeleteConnectionStore
         * @param {DeleteConnectionStoreRequest} deleteConnectionStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectionStore(deleteConnectionStoreRequest: DeleteConnectionStoreRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionStoreStatus> {
            const localVarAxiosArgs = ConnstoreApiAxiosParamCreator(configuration).deleteConnectionStore(deleteConnectionStoreRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary GetConnectionStores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionStores(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionStore>> {
            const localVarAxiosArgs = ConnstoreApiAxiosParamCreator(configuration).getConnectionStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary UpdateConnectionStore
         * @param {string} storeId the id of the stored Connection
         * @param {ConnectionStore} connectionStore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectionStore(storeId: string, connectionStore: ConnectionStore, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionStoreStatus> {
            const localVarAxiosArgs = ConnstoreApiAxiosParamCreator(configuration).updateConnectionStore(storeId, connectionStore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ConnstoreApi - factory interface
 * @export
 */
export const ConnstoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary AddConnectionStore
         * @param {ConnectionStore} [connectionStore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConnectionStore(connectionStore?: ConnectionStore, options?: any) {
            return ConnstoreApiFp(configuration).addConnectionStore(connectionStore, options)(axios, basePath);
        },
        /**
         * 
         * @summary DeleteConnectionStore
         * @param {DeleteConnectionStoreRequest} deleteConnectionStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectionStore(deleteConnectionStoreRequest: DeleteConnectionStoreRequest, options?: any) {
            return ConnstoreApiFp(configuration).deleteConnectionStore(deleteConnectionStoreRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary GetConnectionStores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionStores(options?: any) {
            return ConnstoreApiFp(configuration).getConnectionStores(options)(axios, basePath);
        },
        /**
         * 
         * @summary UpdateConnectionStore
         * @param {string} storeId the id of the stored Connection
         * @param {ConnectionStore} connectionStore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectionStore(storeId: string, connectionStore: ConnectionStore, options?: any) {
            return ConnstoreApiFp(configuration).updateConnectionStore(storeId, connectionStore, options)(axios, basePath);
        },
    };
};

/**
 * ConnstoreApi - object-oriented interface
 * @export
 * @class ConnstoreApi
 * @extends {BaseAPI}
 */
export class ConnstoreApi extends BaseAPI {
    /**
     * 
     * @summary AddConnectionStore
     * @param {ConnectionStore} [connectionStore] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnstoreApi
     */
    public addConnectionStore(connectionStore?: ConnectionStore, options?: any) {
        return ConnstoreApiFp(this.configuration).addConnectionStore(connectionStore, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary DeleteConnectionStore
     * @param {DeleteConnectionStoreRequest} deleteConnectionStoreRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnstoreApi
     */
    public deleteConnectionStore(deleteConnectionStoreRequest: DeleteConnectionStoreRequest, options?: any) {
        return ConnstoreApiFp(this.configuration).deleteConnectionStore(deleteConnectionStoreRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary GetConnectionStores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnstoreApi
     */
    public getConnectionStores(options?: any) {
        return ConnstoreApiFp(this.configuration).getConnectionStores(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary UpdateConnectionStore
     * @param {string} storeId the id of the stored Connection
     * @param {ConnectionStore} connectionStore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnstoreApi
     */
    public updateConnectionStore(storeId: string, connectionStore: ConnectionStore, options?: any) {
        return ConnstoreApiFp(this.configuration).updateConnectionStore(storeId, connectionStore, options)(this.axios, this.basePath);
    }

}

